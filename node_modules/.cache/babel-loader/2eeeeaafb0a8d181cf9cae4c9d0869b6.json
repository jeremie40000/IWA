{"ast":null,"code":"'use strict';\n\nconst retry = require('retry');\n\nconst logger = require('./logging')('kafka-node:ConsumerGroupRecovery');\n\nconst assert = require('assert');\n\nconst _ = require('lodash');\n\nconst GroupCoordinatorNotAvailable = require('./errors/GroupCoordinatorNotAvailableError');\n\nconst NotCoordinatorForGroup = require('./errors/NotCoordinatorForGroupError');\n\nconst IllegalGeneration = require('./errors/IllegalGenerationError');\n\nconst GroupLoadInProgress = require('./errors/GroupLoadInProgressError');\n\nconst UnknownMemberId = require('./errors/UnknownMemberIdError');\n\nconst RebalanceInProgress = require('./errors/RebalanceInProgressError');\n\nconst HeartbeatTimeout = require('./errors/HeartbeatTimeoutError');\n\nconst TimeoutError = require('./errors/TimeoutError');\n\nconst BrokerNotAvailableError = require('./errors').BrokerNotAvailableError;\n\nconst NETWORK_ERROR_CODES = ['ETIMEDOUT', 'ECONNRESET', 'ESOCKETTIMEDOUT', 'ECONNREFUSED', 'EHOSTUNREACH', 'EADDRNOTAVAIL'];\nconst recoverableErrors = [{\n  errors: [GroupCoordinatorNotAvailable, IllegalGeneration, GroupLoadInProgress, RebalanceInProgress, HeartbeatTimeout, TimeoutError]\n}, {\n  errors: [NotCoordinatorForGroup, BrokerNotAvailableError],\n  handler: function () {\n    delete this.client.coordinatorId;\n  }\n}, {\n  errors: [UnknownMemberId],\n  handler: function () {\n    this.memberId = null;\n  }\n}];\n\nfunction isErrorInstanceOf(error, errors) {\n  return errors.some(function (errorClass) {\n    return error instanceof errorClass;\n  });\n}\n\nfunction ConsumerGroupRecovery(consumerGroup) {\n  this.consumerGroup = consumerGroup;\n  this.options = consumerGroup.options;\n}\n\nfunction isNetworkError(error) {\n  if (error && error.code && error.errno) {\n    return _.includes(NETWORK_ERROR_CODES, error.code);\n  }\n\n  return false;\n}\n\nConsumerGroupRecovery.prototype.tryToRecoverFrom = function (error, source) {\n  logger.debug('tryToRecoverFrom', source, error);\n  this.consumerGroup.ready = false;\n  this.consumerGroup.stopHeartbeats();\n  var retryTimeout = false;\n  var retry = isNetworkError(error) || recoverableErrors.some(function (recoverableItem) {\n    if (isErrorInstanceOf(error, recoverableItem.errors)) {\n      recoverableItem.handler && recoverableItem.handler.call(this.consumerGroup, error);\n      return true;\n    }\n\n    return false;\n  }, this);\n\n  if (retry) {\n    retryTimeout = this.getRetryTimeout(error);\n  }\n\n  if (retry && retryTimeout) {\n    logger.debug('RECOVERY from %s: %s retrying in %s ms', source, this.consumerGroup.client.clientId, retryTimeout, error);\n    this.consumerGroup.scheduleReconnect(retryTimeout);\n  } else {\n    this.consumerGroup.emit('error', error);\n  }\n\n  this.lastError = error;\n};\n\nConsumerGroupRecovery.prototype.clearError = function () {\n  this.lastError = null;\n};\n\nConsumerGroupRecovery.prototype.getRetryTimeout = function (error) {\n  assert(error);\n\n  if (!this._timeouts) {\n    this._timeouts = retry.timeouts({\n      retries: this.options.retries,\n      factor: this.options.retryFactor,\n      minTimeout: this.options.retryMinTimeout\n    });\n  }\n\n  if (this._retryIndex == null || this.lastError == null || error.errorCode !== this.lastError.errorCode) {\n    this._retryIndex = 0;\n  }\n\n  var index = this._retryIndex++;\n\n  if (index >= this._timeouts.length) {\n    return false;\n  }\n\n  return this._timeouts[index];\n};\n\nmodule.exports = ConsumerGroupRecovery;","map":{"version":3,"sources":["/home/jerem/Bureau/Cours/IWA/stopcovid-front/node_modules/kafka-node/lib/consumerGroupRecovery.js"],"names":["retry","require","logger","assert","_","GroupCoordinatorNotAvailable","NotCoordinatorForGroup","IllegalGeneration","GroupLoadInProgress","UnknownMemberId","RebalanceInProgress","HeartbeatTimeout","TimeoutError","BrokerNotAvailableError","NETWORK_ERROR_CODES","recoverableErrors","errors","handler","client","coordinatorId","memberId","isErrorInstanceOf","error","some","errorClass","ConsumerGroupRecovery","consumerGroup","options","isNetworkError","code","errno","includes","prototype","tryToRecoverFrom","source","debug","ready","stopHeartbeats","retryTimeout","recoverableItem","call","getRetryTimeout","clientId","scheduleReconnect","emit","lastError","clearError","_timeouts","timeouts","retries","factor","retryFactor","minTimeout","retryMinTimeout","_retryIndex","errorCode","index","length","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst retry = require('retry');\nconst logger = require('./logging')('kafka-node:ConsumerGroupRecovery');\nconst assert = require('assert');\nconst _ = require('lodash');\n\nconst GroupCoordinatorNotAvailable = require('./errors/GroupCoordinatorNotAvailableError');\nconst NotCoordinatorForGroup = require('./errors/NotCoordinatorForGroupError');\nconst IllegalGeneration = require('./errors/IllegalGenerationError');\nconst GroupLoadInProgress = require('./errors/GroupLoadInProgressError');\nconst UnknownMemberId = require('./errors/UnknownMemberIdError');\nconst RebalanceInProgress = require('./errors/RebalanceInProgressError');\nconst HeartbeatTimeout = require('./errors/HeartbeatTimeoutError');\nconst TimeoutError = require('./errors/TimeoutError');\nconst BrokerNotAvailableError = require('./errors').BrokerNotAvailableError;\n\nconst NETWORK_ERROR_CODES = [\n  'ETIMEDOUT',\n  'ECONNRESET',\n  'ESOCKETTIMEDOUT',\n  'ECONNREFUSED',\n  'EHOSTUNREACH',\n  'EADDRNOTAVAIL'\n];\n\nconst recoverableErrors = [\n  {\n    errors: [\n      GroupCoordinatorNotAvailable,\n      IllegalGeneration,\n      GroupLoadInProgress,\n      RebalanceInProgress,\n      HeartbeatTimeout,\n      TimeoutError\n    ]\n  },\n  {\n    errors: [NotCoordinatorForGroup, BrokerNotAvailableError],\n    handler: function () {\n      delete this.client.coordinatorId;\n    }\n  },\n  {\n    errors: [UnknownMemberId],\n    handler: function () {\n      this.memberId = null;\n    }\n  }\n];\n\nfunction isErrorInstanceOf (error, errors) {\n  return errors.some(function (errorClass) {\n    return error instanceof errorClass;\n  });\n}\n\nfunction ConsumerGroupRecovery (consumerGroup) {\n  this.consumerGroup = consumerGroup;\n  this.options = consumerGroup.options;\n}\n\nfunction isNetworkError (error) {\n  if (error && error.code && error.errno) {\n    return _.includes(NETWORK_ERROR_CODES, error.code);\n  }\n  return false;\n}\n\nConsumerGroupRecovery.prototype.tryToRecoverFrom = function (error, source) {\n  logger.debug('tryToRecoverFrom', source, error);\n  this.consumerGroup.ready = false;\n  this.consumerGroup.stopHeartbeats();\n\n  var retryTimeout = false;\n  var retry =\n    isNetworkError(error) ||\n    recoverableErrors.some(function (recoverableItem) {\n      if (isErrorInstanceOf(error, recoverableItem.errors)) {\n        recoverableItem.handler && recoverableItem.handler.call(this.consumerGroup, error);\n        return true;\n      }\n      return false;\n    }, this);\n\n  if (retry) {\n    retryTimeout = this.getRetryTimeout(error);\n  }\n\n  if (retry && retryTimeout) {\n    logger.debug(\n      'RECOVERY from %s: %s retrying in %s ms',\n      source,\n      this.consumerGroup.client.clientId,\n      retryTimeout,\n      error\n    );\n    this.consumerGroup.scheduleReconnect(retryTimeout);\n  } else {\n    this.consumerGroup.emit('error', error);\n  }\n  this.lastError = error;\n};\n\nConsumerGroupRecovery.prototype.clearError = function () {\n  this.lastError = null;\n};\n\nConsumerGroupRecovery.prototype.getRetryTimeout = function (error) {\n  assert(error);\n  if (!this._timeouts) {\n    this._timeouts = retry.timeouts({\n      retries: this.options.retries,\n      factor: this.options.retryFactor,\n      minTimeout: this.options.retryMinTimeout\n    });\n  }\n\n  if (this._retryIndex == null || this.lastError == null || error.errorCode !== this.lastError.errorCode) {\n    this._retryIndex = 0;\n  }\n\n  var index = this._retryIndex++;\n  if (index >= this._timeouts.length) {\n    return false;\n  }\n  return this._timeouts[index];\n};\n\nmodule.exports = ConsumerGroupRecovery;\n"]},"metadata":{},"sourceType":"script"}