{"ast":null,"code":"/*\n Copyright 2013 Daniel Wirtz <dcode@dcode.io>\n Copyright 2009 The Closure Library Authors. All Rights Reserved.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS-IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\n\n/**\n * @license Long.js (c) 2013 Daniel Wirtz <dcode@dcode.io>\n * Released under the Apache License, Version 2.0\n * see: https://github.com/dcodeIO/Long.js for details\n * \n * Long.js is based on goog.math.Long from the Closure Library.\n * Copyright 2009 The Closure Library Authors. All Rights Reserved.\n * Released under the Apache License, Version 2.0\n * see: https://code.google.com/p/closure-library/ for details\n */\n\n/**\n * Defines a Long class for representing a 64-bit two's-complement\n * integer value, which faithfully simulates the behavior of a Java \"long\". This\n * implementation is derived from LongLib in GWT.\n */\n(function (global) {\n  /**\n   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit\n   * values as *signed* integers.  See the from* functions below for more\n   * convenient ways of constructing Longs.\n   *\n   * The internal representation of a long is the two given signed, 32-bit values.\n   * We use 32-bit pieces because these are the size of integers on which\n   * Javascript performs bit-operations.  For operations like addition and\n   * multiplication, we split each number into 16-bit pieces, which can easily be\n   * multiplied within Javascript's floating-point representation without overflow\n   * or change in sign.\n   *\n   * In the algorithms below, we frequently reduce the negative case to the\n   * positive case by negating the input(s) and then post-processing the result.\n   * Note that we must ALWAYS check specially whether those values are MIN_VALUE\n   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n   * a positive number, it overflows back into a negative).  Not handling this\n   * case would often result in infinite recursion.\n   * \n   * @exports Long\n   * @class A Long class for representing a 64-bit two's-complement integer value.\n   * @param {number} low The low (signed) 32 bits of the long.\n   * @param {number} high The high (signed) 32 bits of the long.\n   * @param {boolean=} unsigned Whether unsigned or not. Defaults to `false` (signed).\n   * @constructor\n   */\n  var Long = function (low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     * @expose\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     * @expose\n     */\n\n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     * @expose\n     */\n\n    this.unsigned = !!unsigned;\n  }; // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from* methods on which they depend.\n  // NOTE: The following cache variables are used internally only and are therefore not exposed as properties of the\n  // Long class.\n\n  /**\n   * A cache of the Long representations of small integer values.\n   * @type {!Object}\n   */\n\n\n  var INT_CACHE = {};\n  /**\n   * A cache of the Long representations of small unsigned integer values.\n   * @type {!Object}\n   */\n\n  var UINT_CACHE = {};\n  /**\n   * Returns a Long representing the given (32-bit) integer value.\n   * @param {number} value The 32-bit integer in question.\n   * @param {boolean=} unsigned Whether unsigned or not. Defaults to false (signed).\n   * @return {!Long} The corresponding Long value.\n   * @expose\n   */\n\n  Long.fromInt = function (value, unsigned) {\n    var obj, cachedObj;\n\n    if (!unsigned) {\n      value = value | 0;\n\n      if (-128 <= value && value < 128) {\n        cachedObj = INT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n\n      obj = new Long(value, value < 0 ? -1 : 0, false);\n\n      if (-128 <= value && value < 128) {\n        INT_CACHE[value] = obj;\n      }\n\n      return obj;\n    } else {\n      value = value >>> 0;\n\n      if (0 <= value && value < 256) {\n        cachedObj = UINT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n\n      obj = new Long(value, (value | 0) < 0 ? -1 : 0, true);\n\n      if (0 <= value && value < 256) {\n        UINT_CACHE[value] = obj;\n      }\n\n      return obj;\n    }\n  };\n  /**\n   * Returns a Long representing the given value, provided that it is a finite\n   * number.  Otherwise, zero is returned.\n   * @param {number} value The number in question.\n   * @param {boolean=} unsigned Whether unsigned or not. Defaults to false (signed).\n   * @return {!Long} The corresponding Long value.\n   * @expose\n   */\n\n\n  Long.fromNumber = function (value, unsigned) {\n    unsigned = !!unsigned;\n\n    if (isNaN(value) || !isFinite(value)) {\n      return Long.ZERO;\n    } else if (!unsigned && value <= -TWO_PWR_63_DBL) {\n      return Long.MIN_SIGNED_VALUE;\n    } else if (unsigned && value <= 0) {\n      return Long.MIN_UNSIGNED_VALUE;\n    } else if (!unsigned && value + 1 >= TWO_PWR_63_DBL) {\n      return Long.MAX_SIGNED_VALUE;\n    } else if (unsigned && value >= TWO_PWR_64_DBL) {\n      return Long.MAX_UNSIGNED_VALUE;\n    } else if (value < 0) {\n      return Long.fromNumber(-value, false).negate();\n    } else {\n      return new Long(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n    }\n  };\n  /**\n   * Returns a Long representing the 64bit integer that comes by concatenating the given low and high bits. Each is\n   *  assumed to use 32 bits.\n   * @param {number} lowBits The low 32 bits.\n   * @param {number} highBits The high 32 bits.\n   * @param {boolean=} unsigned Whether unsigned or not. Defaults to false (signed).\n   * @return {!Long} The corresponding Long value.\n   * @expose\n   */\n\n\n  Long.fromBits = function (lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n  };\n  /**\n   * Returns a Long representing the 64bit integer that comes by concatenating the given low, middle and high bits.\n   *  Each is assumed to use 28 bits.\n   * @param {number} part0 The low 28 bits\n   * @param {number} part1 The middle 28 bits\n   * @param {number} part2 The high 28 (8) bits\n   * @param {boolean=} unsigned Whether unsigned or not. Defaults to false (signed).\n   * @return {!Long}\n   * @expose\n   */\n\n\n  Long.from28Bits = function (part0, part1, part2, unsigned) {\n    // 00000000000000000000000000001111 11111111111111111111111122222222 2222222222222\n    // LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\n    return Long.fromBits(part0 | part1 << 28, part1 >>> 4 | part2 << 24, unsigned);\n  };\n  /**\n   * Returns a Long representation of the given string, written using the given\n   * radix.\n   * @param {string} str The textual representation of the Long.\n   * @param {(boolean|number)=} unsigned Whether unsigned or not. Defaults to false (signed).\n   * @param {number=} radix The radix in which the text is written.\n   * @return {!Long} The corresponding Long value.\n   * @expose\n   */\n\n\n  Long.fromString = function (str, unsigned, radix) {\n    if (str.length == 0) {\n      throw new Error('number format error: empty string');\n    }\n\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") {\n      return Long.ZERO;\n    }\n\n    if (typeof unsigned === 'number') {\n      // For goog.math.Long compatibility\n      radix = unsigned;\n      unsigned = false;\n    }\n\n    radix = radix || 10;\n\n    if (radix < 2 || 36 < radix) {\n      throw new Error('radix out of range: ' + radix);\n    }\n\n    if (str.charAt(0) == '-') {\n      return Long.fromString(str.substring(1), unsigned, radix).negate();\n    } else if (str.indexOf('-') >= 0) {\n      throw new Error('number format error: interior \"-\" character: ' + str);\n    } // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n\n\n    var radixToPower = Long.fromNumber(Math.pow(radix, 8));\n    var result = Long.ZERO;\n\n    for (var i = 0; i < str.length; i += 8) {\n      var size = Math.min(8, str.length - i);\n      var value = parseInt(str.substring(i, i + size), radix);\n\n      if (size < 8) {\n        var power = Long.fromNumber(Math.pow(radix, size));\n        result = result.multiply(power).add(Long.fromNumber(value));\n      } else {\n        result = result.multiply(radixToPower);\n        result = result.add(Long.fromNumber(value));\n      }\n    }\n\n    return result;\n  }; // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n  // no runtime penalty for these.\n  // NOTE: The following constant values are used internally only and are therefore not exposed as properties of the\n  // Long class.\n\n  /**\n   * @type {number}\n   */\n\n\n  var TWO_PWR_16_DBL = 1 << 16;\n  /**\n   * @type {number}\n   */\n\n  var TWO_PWR_24_DBL = 1 << 24;\n  /**\n   * @type {number}\n   */\n\n  var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n  /**\n   * @type {number}\n   */\n\n  var TWO_PWR_31_DBL = TWO_PWR_32_DBL / 2;\n  /**\n   * @type {number}\n   */\n\n  var TWO_PWR_48_DBL = TWO_PWR_32_DBL * TWO_PWR_16_DBL;\n  /**\n   * @type {number}\n   */\n\n  var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n  /**\n   * @type {number}\n   */\n\n  var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n  /**\n   * @type {!Long}\n   */\n\n  var TWO_PWR_24 = Long.fromInt(1 << 24);\n  /**\n   * @type {!Long}\n   * @expose\n   */\n\n  Long.ZERO = Long.fromInt(0);\n  /**\n   * @type {!Long}\n   * @expose\n   */\n\n  Long.ONE = Long.fromInt(1);\n  /**\n   * @type {!Long}\n   * @expose\n   */\n\n  Long.NEG_ONE = Long.fromInt(-1);\n  /**\n   * @type {!Long}\n   * @expose\n   */\n\n  Long.MAX_SIGNED_VALUE = Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n  /**\n   * @type {!Long}\n   * @expose\n   */\n\n  Long.MAX_UNSIGNED_VALUE = Long.fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n  /**\n   * Alias of {@link Long.MAX_SIGNED_VALUE} for goog.math.Long compatibility.\n   * @type {!Long}\n   * @expose\n   */\n\n  Long.MAX_VALUE = Long.MAX_SIGNED_VALUE;\n  /**\n   * @type {!Long}\n   * @expose\n   */\n\n  Long.MIN_SIGNED_VALUE = Long.fromBits(0, 0x80000000 | 0, false);\n  /**\n   * @type {!Long}\n   * @expose\n   */\n\n  Long.MIN_UNSIGNED_VALUE = Long.fromBits(0, 0, true);\n  /**\n   * Alias of {@link Long.MIN_SIGNED_VALUE}  for goog.math.Long compatibility.\n   * @type {!Long}\n   * @expose\n   */\n\n  Long.MIN_VALUE = Long.MIN_SIGNED_VALUE;\n  /**\n   * @return {number} The value, assuming it is a 32-bit integer.\n   * @expose\n   */\n\n  Long.prototype.toInt = function () {\n    return this.unsigned ? this.low >>> 0 : this.low;\n  };\n  /**\n   * @return {number} The closest floating-point representation to this value.\n   * @expose\n   */\n\n\n  Long.prototype.toNumber = function () {\n    if (this.unsigned) {\n      return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n    }\n\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n  };\n  /**\n   * @param {number=} radix The radix in which the text should be written.\n   * @return {string} The textual representation of this value.\n   * @override\n   * @expose\n   */\n\n\n  Long.prototype.toString = function (radix) {\n    radix = radix || 10;\n\n    if (radix < 2 || 36 < radix) {\n      throw new Error('radix out of range: ' + radix);\n    }\n\n    if (this.isZero()) {\n      return '0';\n    }\n\n    var rem;\n\n    if (this.isNegative()) {\n      // Unsigned Longs are never negative\n      if (this.equals(Long.MIN_SIGNED_VALUE)) {\n        // We need to change the Long value before it can be negated, so we remove\n        // the bottom-most digit in this base and then recurse to do the rest.\n        var radixLong = Long.fromNumber(radix);\n        var div = this.div(radixLong);\n        rem = div.multiply(radixLong).subtract(this);\n        return div.toString(radix) + rem.toInt().toString(radix);\n      } else {\n        return '-' + this.negate().toString(radix);\n      }\n    } // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n\n\n    var radixToPower = Long.fromNumber(Math.pow(radix, 6));\n    rem = this;\n    var result = '';\n\n    while (true) {\n      var remDiv = rem.div(radixToPower);\n      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();\n      var digits = intval.toString(radix);\n      rem = remDiv;\n\n      if (rem.isZero()) {\n        return digits + result;\n      } else {\n        while (digits.length < 6) {\n          digits = '0' + digits;\n        }\n\n        result = '' + digits + result;\n      }\n    }\n  };\n  /**\n   * @return {number} The high 32 bits as a signed value.\n   * @expose\n   */\n\n\n  Long.prototype.getHighBits = function () {\n    return this.high;\n  };\n  /**\n   * @return {number} The high 32 bits as an unsigned value.\n   * @expose\n   */\n\n\n  Long.prototype.getHighBitsUnsigned = function () {\n    return this.high >>> 0;\n  };\n  /**\n   * @return {number} The low 32 bits as a signed value.\n   * @expose\n   */\n\n\n  Long.prototype.getLowBits = function () {\n    return this.low;\n  };\n  /**\n   * @return {number} The low 32 bits as an unsigned value.\n   * @expose\n   */\n\n\n  Long.prototype.getLowBitsUnsigned = function () {\n    return this.low >>> 0;\n  };\n  /**\n   * @return {number} Returns the number of bits needed to represent the absolute\n   *     value of this Long.\n   * @expose\n   */\n\n\n  Long.prototype.getNumBitsAbs = function () {\n    if (this.isNegative()) {\n      // Unsigned Longs are never negative\n      if (this.equals(Long.MIN_SIGNED_VALUE)) {\n        return 64;\n      } else {\n        return this.negate().getNumBitsAbs();\n      }\n    } else {\n      var val = this.high != 0 ? this.high : this.low;\n\n      for (var bit = 31; bit > 0; bit--) {\n        if ((val & 1 << bit) != 0) {\n          break;\n        }\n      }\n\n      return this.high != 0 ? bit + 33 : bit + 1;\n    }\n  };\n  /**\n   * @return {boolean} Whether this value is zero.\n   * @expose\n   */\n\n\n  Long.prototype.isZero = function () {\n    return this.high == 0 && this.low == 0;\n  };\n  /**\n   * @return {boolean} Whether this value is negative.\n   * @expose\n   */\n\n\n  Long.prototype.isNegative = function () {\n    return !this.unsigned && this.high < 0;\n  };\n  /**\n   * @return {boolean} Whether this value is odd.\n   * @expose\n   */\n\n\n  Long.prototype.isOdd = function () {\n    return (this.low & 1) == 1;\n  };\n  /**\n   * @return {boolean} Whether this value is even.\n   */\n\n\n  Long.prototype.isEven = function () {\n    return (this.low & 1) == 0;\n  };\n  /**\n   * @param {Long} other Long to compare against.\n   * @return {boolean} Whether this Long equals the other.\n   * @expose\n   */\n\n\n  Long.prototype.equals = function (other) {\n    if (this.unsigned != other.unsigned && this.high >>> 31 != other.high >>> 31) return false;\n    return this.high == other.high && this.low == other.low;\n  };\n  /**\n   * @param {Long} other Long to compare against.\n   * @return {boolean} Whether this Long does not equal the other.\n   * @expose\n   */\n\n\n  Long.prototype.notEquals = function (other) {\n    return !this.equals(other);\n  };\n  /**\n   * @param {Long} other Long to compare against.\n   * @return {boolean} Whether this Long is less than the other.\n   * @expose\n   */\n\n\n  Long.prototype.lessThan = function (other) {\n    return this.compare(other) < 0;\n  };\n  /**\n   * @param {Long} other Long to compare against.\n   * @return {boolean} Whether this Long is less than or equal to the other.\n   * @expose\n   */\n\n\n  Long.prototype.lessThanOrEqual = function (other) {\n    return this.compare(other) <= 0;\n  };\n  /**\n   * @param {Long} other Long to compare against.\n   * @return {boolean} Whether this Long is greater than the other.\n   * @expose\n   */\n\n\n  Long.prototype.greaterThan = function (other) {\n    return this.compare(other) > 0;\n  };\n  /**\n   * @param {Long} other Long to compare against.\n   * @return {boolean} Whether this Long is greater than or equal to the other.\n   * @expose\n   */\n\n\n  Long.prototype.greaterThanOrEqual = function (other) {\n    return this.compare(other) >= 0;\n  };\n  /**\n   * Compares this Long with the given one.\n   * @param {Long} other Long to compare against.\n   * @return {number} 0 if they are the same, 1 if the this is greater, and -1\n   *     if the given one is greater.\n   * @expose\n   */\n\n\n  Long.prototype.compare = function (other) {\n    if (this.equals(other)) {\n      return 0;\n    }\n\n    var thisNeg = this.isNegative();\n    var otherNeg = other.isNegative();\n    if (thisNeg && !otherNeg) return -1;\n    if (!thisNeg && otherNeg) return 1;\n\n    if (!this.unsigned) {\n      // At this point the signs are the same\n      return this.subtract(other).isNegative() ? -1 : 1;\n    } else {\n      // Both are positive if at least one is unsigned\n      return other.high >>> 0 > this.high >>> 0 || other.high == this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n    }\n  };\n  /**\n   * @return {!Long} The negation of this value.\n   * @expose\n   */\n\n\n  Long.prototype.negate = function () {\n    if (!this.unsigned && this.equals(Long.MIN_SIGNED_VALUE)) {\n      return Long.MIN_SIGNED_VALUE;\n    }\n\n    return this.not().add(Long.ONE);\n  };\n  /**\n   * Returns the sum of this and the given Long.\n   * @param {Long} other Long to add to this one.\n   * @return {!Long} The sum of this and the given Long.\n   * @expose\n   */\n\n\n  Long.prototype.add = function (other) {\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = other.high >>> 16;\n    var b32 = other.high & 0xFFFF;\n    var b16 = other.low >>> 16;\n    var b00 = other.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return Long.fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the difference of this and the given Long.\n   * @param {Long} other Long to subtract from this.\n   * @return {!Long} The difference of this and the given Long.\n   * @expose\n   */\n\n\n  Long.prototype.subtract = function (other) {\n    return this.add(other.negate());\n  };\n  /**\n   * Returns the product of this and the given long.\n   * @param {Long} other Long to multiply with this.\n   * @return {!Long} The product of this and the other.\n   * @expose\n   */\n\n\n  Long.prototype.multiply = function (other) {\n    if (this.isZero()) {\n      return Long.ZERO;\n    } else if (other.isZero()) {\n      return Long.ZERO;\n    }\n\n    if (this.equals(Long.MIN_VALUE)) {\n      return other.isOdd() ? Long.MIN_VALUE : Long.ZERO;\n    } else if (other.equals(Long.MIN_VALUE)) {\n      return this.isOdd() ? Long.MIN_VALUE : Long.ZERO;\n    }\n\n    if (this.isNegative()) {\n      if (other.isNegative()) {\n        return this.negate().multiply(other.negate());\n      } else {\n        return this.negate().multiply(other).negate();\n      }\n    } else if (other.isNegative()) {\n      return this.multiply(other.negate()).negate();\n    } // If both longs are small, use float multiplication\n\n\n    if (this.lessThan(TWO_PWR_24) && other.lessThan(TWO_PWR_24)) {\n      return Long.fromNumber(this.toNumber() * other.toNumber(), this.unsigned);\n    } // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n\n\n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = other.high >>> 16;\n    var b32 = other.high & 0xFFFF;\n    var b16 = other.low >>> 16;\n    var b00 = other.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return Long.fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns this Long divided by the given one.\n   * @param {Long} other Long by which to divide.\n   * @return {!Long} This Long divided by the given one.\n   * @expose\n   */\n\n\n  Long.prototype.div = function (other) {\n    if (other.isZero()) {\n      throw new Error('division by zero');\n    } else if (this.isZero()) {\n      return Long.ZERO;\n    }\n\n    if (this.equals(Long.MIN_SIGNED_VALUE)) {\n      if (other.equals(Long.ONE) || other.equals(Long.NEG_ONE)) {\n        return min; // recall that -MIN_VALUE == MIN_VALUE\n      } else if (other.equals(Long.MIN_VALUE)) {\n        return Long.ONE;\n      } else {\n        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n        var halfThis = this.shiftRight(1);\n        var approx = halfThis.div(other).shiftLeft(1);\n\n        if (approx.equals(Long.ZERO)) {\n          return other.isNegative() ? Long.ONE : Long.NEG_ONE;\n        } else {\n          var rem = this.subtract(other.multiply(approx));\n          var result = approx.add(rem.div(other));\n          return result;\n        }\n      }\n    } else if (other.equals(Long.MIN_VALUE)) {\n      return Long.ZERO;\n    }\n\n    if (this.isNegative()) {\n      if (other.isNegative()) {\n        return this.negate().div(other.negate());\n      } else {\n        return this.negate().div(other).negate();\n      }\n    } else if (other.isNegative()) {\n      return this.div(other.negate()).negate();\n    } // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n\n\n    var res = Long.ZERO;\n    var rem = this;\n\n    while (rem.greaterThanOrEqual(other)) {\n      // Approximate the result of division. This may be a little greater or\n      // smaller than the actual value.\n      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber())); // We will tweak the approximate result by changing it in the 48-th digit or\n      // the smallest non-fractional digit, whichever is larger.\n\n      var log2 = Math.ceil(Math.log(approx) / Math.LN2);\n      var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48); // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n\n      var approxRes = Long.fromNumber(approx, this.unsigned);\n      var approxRem = approxRes.multiply(other);\n\n      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {\n        approx -= delta;\n        approxRes = Long.fromNumber(approx, this.unsigned);\n        approxRem = approxRes.multiply(other);\n      } // We know the answer can't be zero... and actually, zero would cause\n      // infinite recursion since we would make no progress.\n\n\n      if (approxRes.isZero()) {\n        approxRes = Long.ONE;\n      }\n\n      res = res.add(approxRes);\n      rem = rem.subtract(approxRem);\n    }\n\n    return res;\n  };\n  /**\n   * Returns this Long modulo the given one.\n   * @param {Long} other Long by which to mod.\n   * @return {!Long} This Long modulo the given one.\n   * @expose\n   */\n\n\n  Long.prototype.modulo = function (other) {\n    return this.subtract(this.div(other).multiply(other));\n  };\n  /**\n   * @return {!Long} The bitwise-NOT of this value.\n   * @expose\n   */\n\n\n  Long.prototype.not = function () {\n    return Long.fromBits(~this.low, ~this.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise-AND of this Long and the given one.\n   * @param {Long} other The Long with which to AND.\n   * @return {!Long} The bitwise-AND of this and the other.\n   * @expose\n   */\n\n\n  Long.prototype.and = function (other) {\n    return Long.fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise-OR of this Long and the given one.\n   * @param {Long} other The Long with which to OR.\n   * @return {!Long} The bitwise-OR of this and the other.\n   * @expose\n   */\n\n\n  Long.prototype.or = function (other) {\n    return Long.fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise-XOR of this Long and the given one.\n   * @param {Long} other The Long with which to XOR.\n   * @return {!Long} The bitwise-XOR of this and the other.\n   * @expose\n   */\n\n\n  Long.prototype.xor = function (other) {\n    return Long.fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount.\n   * @param {number} numBits The number of bits by which to shift.\n   * @return {!Long} This shifted to the left by the given amount.\n   * @expose\n   */\n\n\n  Long.prototype.shiftLeft = function (numBits) {\n    numBits &= 63;\n\n    if (numBits == 0) {\n      return this;\n    } else {\n      var low = this.low;\n\n      if (numBits < 32) {\n        var high = this.high;\n        return Long.fromBits(low << numBits, high << numBits | low >>> 32 - numBits, this.unsigned);\n      } else {\n        return Long.fromBits(0, low << numBits - 32, this.unsigned);\n      }\n    }\n  };\n  /**\n   * Returns this Long with bits shifted to the right by the given amount.\n   * @param {number} numBits The number of bits by which to shift.\n   * @return {!Long} This shifted to the right by the given amount.\n   * @expose\n   */\n\n\n  Long.prototype.shiftRight = function (numBits) {\n    numBits &= 63;\n\n    if (numBits == 0) {\n      return this;\n    } else {\n      var high = this.high;\n\n      if (numBits < 32) {\n        var low = this.low;\n        return Long.fromBits(low >>> numBits | high << 32 - numBits, high >> numBits, this.unsigned);\n      } else {\n        return Long.fromBits(high >> numBits - 32, high >= 0 ? 0 : -1, this.unsigned);\n      }\n    }\n  };\n  /**\n   * Returns this Long with bits shifted to the right by the given amount, with\n   * the new top bits matching the current sign bit.\n   * @param {number} numBits The number of bits by which to shift.\n   * @return {!Long} This shifted to the right by the given amount, with\n   *     zeros placed into the new leading bits.\n   * @expose\n   */\n\n\n  Long.prototype.shiftRightUnsigned = function (numBits) {\n    numBits &= 63;\n\n    if (numBits == 0) {\n      return this;\n    } else {\n      var high = this.high;\n\n      if (numBits < 32) {\n        var low = this.low;\n        return Long.fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits, this.unsigned);\n      } else if (numBits == 32) {\n        return Long.fromBits(high, 0, this.unsigned);\n      } else {\n        return Long.fromBits(high >>> numBits - 32, 0, this.unsigned);\n      }\n    }\n  };\n  /**\n   * @return {!Long} Signed long\n   * @expose\n   */\n\n\n  Long.prototype.toSigned = function () {\n    var l = this.clone();\n    l.unsigned = false;\n    return l;\n  };\n  /**\n   * @return {!Long} Unsigned long\n   * @expose\n   */\n\n\n  Long.prototype.toUnsigned = function () {\n    var l = this.clone();\n    l.unsigned = true;\n    return l;\n  };\n  /**\n   * @return {Long} Cloned instance with the same low/high bits and unsigned flag.\n   * @expose\n   */\n\n\n  Long.prototype.clone = function () {\n    return new Long(this.low, this.high, this.unsigned);\n  }; // Enable module loading if available\n\n\n  if (typeof module != 'undefined' && module[\"exports\"]) {\n    // CommonJS\n    module[\"exports\"] = Long;\n  } else if (typeof define != 'undefined' && define[\"amd\"]) {\n    // AMD\n    define(\"Math/Long\", [], function () {\n      return Long;\n    });\n  } else {\n    // Shim\n    if (!global[\"dcodeIO\"]) {\n      global[\"dcodeIO\"] = {};\n    }\n\n    global[\"dcodeIO\"][\"Long\"] = Long;\n  }\n})(this);","map":{"version":3,"sources":["/home/jerem/Bureau/Cours/IWA/stopcovid-front/node_modules/long/Long.js"],"names":["global","Long","low","high","unsigned","INT_CACHE","UINT_CACHE","fromInt","value","obj","cachedObj","fromNumber","isNaN","isFinite","ZERO","TWO_PWR_63_DBL","MIN_SIGNED_VALUE","MIN_UNSIGNED_VALUE","MAX_SIGNED_VALUE","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","negate","TWO_PWR_32_DBL","fromBits","lowBits","highBits","from28Bits","part0","part1","part2","fromString","str","radix","length","Error","charAt","substring","indexOf","radixToPower","Math","pow","result","i","size","min","parseInt","power","multiply","add","TWO_PWR_16_DBL","TWO_PWR_24_DBL","TWO_PWR_31_DBL","TWO_PWR_48_DBL","TWO_PWR_24","ONE","NEG_ONE","MAX_VALUE","MIN_VALUE","prototype","toInt","toNumber","toString","isZero","rem","isNegative","equals","radixLong","div","subtract","remDiv","intval","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","val","bit","isOdd","isEven","other","notEquals","lessThan","compare","lessThanOrEqual","greaterThan","greaterThanOrEqual","thisNeg","otherNeg","not","a48","a32","a16","a00","b48","b32","b16","b00","c48","c32","c16","c00","halfThis","shiftRight","approx","shiftLeft","res","max","floor","log2","ceil","log","LN2","delta","approxRes","approxRem","modulo","and","or","xor","numBits","shiftRightUnsigned","toSigned","l","clone","toUnsigned","module","define"],"mappings":"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","sourcesContent":["/*\n Copyright 2013 Daniel Wirtz <dcode@dcode.io>\n Copyright 2009 The Closure Library Authors. All Rights Reserved.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS-IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\n\n/**\n * @license Long.js (c) 2013 Daniel Wirtz <dcode@dcode.io>\n * Released under the Apache License, Version 2.0\n * see: https://github.com/dcodeIO/Long.js for details\n * \n * Long.js is based on goog.math.Long from the Closure Library.\n * Copyright 2009 The Closure Library Authors. All Rights Reserved.\n * Released under the Apache License, Version 2.0\n * see: https://code.google.com/p/closure-library/ for details\n */\n\n/**\n * Defines a Long class for representing a 64-bit two's-complement\n * integer value, which faithfully simulates the behavior of a Java \"long\". This\n * implementation is derived from LongLib in GWT.\n */\n(function(global) {\n\n    /**\n     * Constructs a 64-bit two's-complement integer, given its low and high 32-bit\n     * values as *signed* integers.  See the from* functions below for more\n     * convenient ways of constructing Longs.\n     *\n     * The internal representation of a long is the two given signed, 32-bit values.\n     * We use 32-bit pieces because these are the size of integers on which\n     * Javascript performs bit-operations.  For operations like addition and\n     * multiplication, we split each number into 16-bit pieces, which can easily be\n     * multiplied within Javascript's floating-point representation without overflow\n     * or change in sign.\n     *\n     * In the algorithms below, we frequently reduce the negative case to the\n     * positive case by negating the input(s) and then post-processing the result.\n     * Note that we must ALWAYS check specially whether those values are MIN_VALUE\n     * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n     * a positive number, it overflows back into a negative).  Not handling this\n     * case would often result in infinite recursion.\n     * \n     * @exports Long\n     * @class A Long class for representing a 64-bit two's-complement integer value.\n     * @param {number} low The low (signed) 32 bits of the long.\n     * @param {number} high The high (signed) 32 bits of the long.\n     * @param {boolean=} unsigned Whether unsigned or not. Defaults to `false` (signed).\n     * @constructor\n     */\n    var Long = function(low, high, unsigned) {\n        \n        /**\n         * The low 32 bits as a signed value.\n         * @type {number}\n         * @expose\n         */\n        this.low = low | 0;\n\n        /**\n         * The high 32 bits as a signed value.\n         * @type {number}\n         * @expose\n         */\n        this.high = high | 0;\n\n        /**\n         * Whether unsigned or not.\n         * @type {boolean}\n         * @expose\n         */\n        this.unsigned = !!unsigned;\n    };\n\n    // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from* methods on which they depend.\n\n    // NOTE: The following cache variables are used internally only and are therefore not exposed as properties of the\n    // Long class.\n    \n    /**\n     * A cache of the Long representations of small integer values.\n     * @type {!Object}\n     */\n    var INT_CACHE = {};\n\n    /**\n     * A cache of the Long representations of small unsigned integer values.\n     * @type {!Object}\n     */\n    var UINT_CACHE = {};\n\n    /**\n     * Returns a Long representing the given (32-bit) integer value.\n     * @param {number} value The 32-bit integer in question.\n     * @param {boolean=} unsigned Whether unsigned or not. Defaults to false (signed).\n     * @return {!Long} The corresponding Long value.\n     * @expose\n     */\n    Long.fromInt = function(value, unsigned) {\n        var obj, cachedObj;\n        if (!unsigned) {\n            value = value | 0;\n            if (-128 <= value && value < 128) {\n                cachedObj = INT_CACHE[value];\n                if (cachedObj) return cachedObj;\n            }\n            obj = new Long(value, value < 0 ? -1 : 0, false);\n            if (-128 <= value && value < 128) {\n                INT_CACHE[value] = obj;\n            }\n            return obj;\n        } else {\n            value = value >>> 0;\n            if (0 <= value && value < 256) {\n                cachedObj = UINT_CACHE[value];\n                if (cachedObj) return cachedObj;\n            }\n            obj = new Long(value, (value | 0) < 0 ? -1 : 0, true);\n            if (0 <= value && value < 256) {\n                UINT_CACHE[value] = obj;\n            }\n            return obj;\n        }\n    };\n\n    /**\n     * Returns a Long representing the given value, provided that it is a finite\n     * number.  Otherwise, zero is returned.\n     * @param {number} value The number in question.\n     * @param {boolean=} unsigned Whether unsigned or not. Defaults to false (signed).\n     * @return {!Long} The corresponding Long value.\n     * @expose\n     */\n    Long.fromNumber = function(value, unsigned) {\n        unsigned = !!unsigned;\n        if (isNaN(value) || !isFinite(value)) {\n            return Long.ZERO;\n        } else if (!unsigned && value <= -TWO_PWR_63_DBL) {\n            return Long.MIN_SIGNED_VALUE;\n        } else if (unsigned && value <= 0) {\n            return Long.MIN_UNSIGNED_VALUE;\n        } else if (!unsigned && value + 1 >= TWO_PWR_63_DBL) {\n            return Long.MAX_SIGNED_VALUE;\n        } else if (unsigned && value >= TWO_PWR_64_DBL) {\n            return Long.MAX_UNSIGNED_VALUE;\n        } else if (value < 0) {\n            return Long.fromNumber(-value, false).negate();\n        } else {\n            return new Long((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\n        }\n    };\n\n    /**\n     * Returns a Long representing the 64bit integer that comes by concatenating the given low and high bits. Each is\n     *  assumed to use 32 bits.\n     * @param {number} lowBits The low 32 bits.\n     * @param {number} highBits The high 32 bits.\n     * @param {boolean=} unsigned Whether unsigned or not. Defaults to false (signed).\n     * @return {!Long} The corresponding Long value.\n     * @expose\n     */\n    Long.fromBits = function(lowBits, highBits, unsigned) {\n        return new Long(lowBits, highBits, unsigned);\n    };\n\n    /**\n     * Returns a Long representing the 64bit integer that comes by concatenating the given low, middle and high bits.\n     *  Each is assumed to use 28 bits.\n     * @param {number} part0 The low 28 bits\n     * @param {number} part1 The middle 28 bits\n     * @param {number} part2 The high 28 (8) bits\n     * @param {boolean=} unsigned Whether unsigned or not. Defaults to false (signed).\n     * @return {!Long}\n     * @expose\n     */\n    Long.from28Bits = function(part0, part1, part2, unsigned) {\n        // 00000000000000000000000000001111 11111111111111111111111122222222 2222222222222\n        // LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\n        return Long.fromBits(part0 | (part1 << 28), (part1 >>> 4) | (part2) << 24, unsigned);\n    };\n\n    /**\n     * Returns a Long representation of the given string, written using the given\n     * radix.\n     * @param {string} str The textual representation of the Long.\n     * @param {(boolean|number)=} unsigned Whether unsigned or not. Defaults to false (signed).\n     * @param {number=} radix The radix in which the text is written.\n     * @return {!Long} The corresponding Long value.\n     * @expose\n     */\n    Long.fromString = function(str, unsigned, radix) {\n        if (str.length == 0) {\n            throw(new Error('number format error: empty string'));\n        }\n        if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") {\n            return Long.ZERO;\n        }\n        if (typeof unsigned === 'number') { // For goog.math.Long compatibility\n            radix = unsigned;\n            unsigned = false;\n        }\n        radix = radix || 10;\n        if (radix < 2 || 36 < radix) {\n            throw(new Error('radix out of range: ' + radix));\n        }\n\n        if (str.charAt(0) == '-') {\n            return Long.fromString(str.substring(1), unsigned, radix).negate();\n        } else if (str.indexOf('-') >= 0) {\n            throw(new Error('number format error: interior \"-\" character: ' + str));\n        }\n\n        // Do several (8) digits each time through the loop, so as to\n        // minimize the calls to the very expensive emulated div.\n        var radixToPower = Long.fromNumber(Math.pow(radix, 8));\n\n        var result = Long.ZERO;\n        for (var i = 0; i < str.length; i += 8) {\n            var size = Math.min(8, str.length - i);\n            var value = parseInt(str.substring(i, i + size), radix);\n            if (size < 8) {\n                var power = Long.fromNumber(Math.pow(radix, size));\n                result = result.multiply(power).add(Long.fromNumber(value));\n            } else {\n                result = result.multiply(radixToPower);\n                result = result.add(Long.fromNumber(value));\n            }\n        }\n        return result;\n    };\n\n    // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n    // no runtime penalty for these.\n    \n    // NOTE: The following constant values are used internally only and are therefore not exposed as properties of the\n    // Long class.\n\n    /**\n     * @type {number}\n     */\n    var TWO_PWR_16_DBL = 1 << 16;\n\n    /**\n     * @type {number}\n     */\n    var TWO_PWR_24_DBL = 1 << 24;\n\n    /**\n     * @type {number}\n     */\n    var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n\n    /**\n     * @type {number}\n     */\n    var TWO_PWR_31_DBL = TWO_PWR_32_DBL / 2;\n\n    /**\n     * @type {number}\n     */\n    var TWO_PWR_48_DBL = TWO_PWR_32_DBL * TWO_PWR_16_DBL;\n\n    /**\n     * @type {number}\n     */\n    var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n\n    /**\n     * @type {number}\n     */\n    var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n\n    /**\n     * @type {!Long}\n     */\n    var TWO_PWR_24 = Long.fromInt(1 << 24);\n\n    /**\n     * @type {!Long}\n     * @expose\n     */\n    Long.ZERO = Long.fromInt(0);\n\n    /**\n     * @type {!Long}\n     * @expose\n     */\n    Long.ONE = Long.fromInt(1);\n\n    /**\n     * @type {!Long}\n     * @expose\n     */\n    Long.NEG_ONE = Long.fromInt(-1);\n\n    /**\n     * @type {!Long}\n     * @expose\n     */\n    Long.MAX_SIGNED_VALUE = Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n\n    /**\n     * @type {!Long}\n     * @expose\n     */\n    Long.MAX_UNSIGNED_VALUE = Long.fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n\n    /**\n     * Alias of {@link Long.MAX_SIGNED_VALUE} for goog.math.Long compatibility.\n     * @type {!Long}\n     * @expose\n     */\n    Long.MAX_VALUE = Long.MAX_SIGNED_VALUE;\n\n    /**\n     * @type {!Long}\n     * @expose\n     */\n    Long.MIN_SIGNED_VALUE = Long.fromBits(0, 0x80000000 | 0, false);\n\n    /**\n     * @type {!Long}\n     * @expose\n     */\n    Long.MIN_UNSIGNED_VALUE = Long.fromBits(0, 0, true);\n\n    /**\n     * Alias of {@link Long.MIN_SIGNED_VALUE}  for goog.math.Long compatibility.\n     * @type {!Long}\n     * @expose\n     */\n    Long.MIN_VALUE = Long.MIN_SIGNED_VALUE;\n\n    /**\n     * @return {number} The value, assuming it is a 32-bit integer.\n     * @expose\n     */\n    Long.prototype.toInt = function() {\n        return this.unsigned ? this.low >>> 0 : this.low;\n    };\n\n    /**\n     * @return {number} The closest floating-point representation to this value.\n     * @expose\n     */\n    Long.prototype.toNumber = function() {\n        if (this.unsigned) {\n            return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\n        }\n        return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n    };\n\n    /**\n     * @param {number=} radix The radix in which the text should be written.\n     * @return {string} The textual representation of this value.\n     * @override\n     * @expose\n     */\n    Long.prototype.toString = function(radix) {\n        radix = radix || 10;\n        if (radix < 2 || 36 < radix) {\n            throw(new Error('radix out of range: ' + radix));\n        }\n        if (this.isZero()) {\n            return '0';\n        }\n        var rem;\n        if (this.isNegative()) { // Unsigned Longs are never negative\n            if (this.equals(Long.MIN_SIGNED_VALUE)) {\n                // We need to change the Long value before it can be negated, so we remove\n                // the bottom-most digit in this base and then recurse to do the rest.\n                var radixLong = Long.fromNumber(radix);\n                var div = this.div(radixLong);\n                rem = div.multiply(radixLong).subtract(this);\n                return div.toString(radix) + rem.toInt().toString(radix);\n            } else {\n                return '-' + this.negate().toString(radix);\n            }\n        }\n\n        // Do several (6) digits each time through the loop, so as to\n        // minimize the calls to the very expensive emulated div.\n        var radixToPower = Long.fromNumber(Math.pow(radix, 6));\n        rem = this;\n        var result = '';\n        while (true) {\n            var remDiv = rem.div(radixToPower);\n            var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();\n            var digits = intval.toString(radix);\n            rem = remDiv;\n            if (rem.isZero()) {\n                return digits + result;\n            } else {\n                while (digits.length < 6) {\n                    digits = '0' + digits;\n                }\n                result = '' + digits + result;\n            }\n        }\n    };\n\n    /**\n     * @return {number} The high 32 bits as a signed value.\n     * @expose\n     */\n    Long.prototype.getHighBits = function() {\n        return this.high;\n    };\n\n    /**\n     * @return {number} The high 32 bits as an unsigned value.\n     * @expose\n     */\n    Long.prototype.getHighBitsUnsigned = function() {\n        return this.high >>> 0;\n    };\n\n    /**\n     * @return {number} The low 32 bits as a signed value.\n     * @expose\n     */\n    Long.prototype.getLowBits = function() {\n        return this.low;\n    };\n\n    /**\n     * @return {number} The low 32 bits as an unsigned value.\n     * @expose\n     */\n    Long.prototype.getLowBitsUnsigned = function() {\n        return this.low >>> 0;\n    };\n\n    /**\n     * @return {number} Returns the number of bits needed to represent the absolute\n     *     value of this Long.\n     * @expose\n     */\n    Long.prototype.getNumBitsAbs = function() {\n        if (this.isNegative()) { // Unsigned Longs are never negative\n            if (this.equals(Long.MIN_SIGNED_VALUE)) {\n                return 64;\n            } else {\n                return this.negate().getNumBitsAbs();\n            }\n        } else {\n            var val = this.high != 0 ? this.high : this.low;\n            for (var bit = 31; bit > 0; bit--) {\n                if ((val & (1 << bit)) != 0) {\n                    break;\n                }\n            }\n            return this.high != 0 ? bit + 33 : bit + 1;\n        }\n    };\n\n    /**\n     * @return {boolean} Whether this value is zero.\n     * @expose\n     */\n    Long.prototype.isZero = function() {\n        return this.high == 0 && this.low == 0;\n    };\n\n    /**\n     * @return {boolean} Whether this value is negative.\n     * @expose\n     */\n    Long.prototype.isNegative = function() {\n        return !this.unsigned && this.high < 0;\n    };\n\n    /**\n     * @return {boolean} Whether this value is odd.\n     * @expose\n     */\n    Long.prototype.isOdd = function() {\n        return (this.low & 1) == 1;\n    };\n\n    /**\n     * @return {boolean} Whether this value is even.\n     */\n    Long.prototype.isEven = function() {\n        return (this.low & 1) == 0;\n    };\n\n    /**\n     * @param {Long} other Long to compare against.\n     * @return {boolean} Whether this Long equals the other.\n     * @expose\n     */\n    Long.prototype.equals = function(other) {\n        if (this.unsigned != other.unsigned && (this.high >>> 31) != (other.high >>> 31)) return false;\n        return (this.high == other.high) && (this.low == other.low);\n    };\n\n    /**\n     * @param {Long} other Long to compare against.\n     * @return {boolean} Whether this Long does not equal the other.\n     * @expose\n     */\n    Long.prototype.notEquals = function(other) {\n        return !this.equals(other);\n    };\n\n    /**\n     * @param {Long} other Long to compare against.\n     * @return {boolean} Whether this Long is less than the other.\n     * @expose\n     */\n    Long.prototype.lessThan = function(other) {\n        return this.compare(other) < 0;\n    };\n\n    /**\n     * @param {Long} other Long to compare against.\n     * @return {boolean} Whether this Long is less than or equal to the other.\n     * @expose\n     */\n    Long.prototype.lessThanOrEqual = function(other) {\n        return this.compare(other) <= 0;\n    };\n\n    /**\n     * @param {Long} other Long to compare against.\n     * @return {boolean} Whether this Long is greater than the other.\n     * @expose\n     */\n    Long.prototype.greaterThan = function(other) {\n        return this.compare(other) > 0;\n    };\n\n    /**\n     * @param {Long} other Long to compare against.\n     * @return {boolean} Whether this Long is greater than or equal to the other.\n     * @expose\n     */\n    Long.prototype.greaterThanOrEqual = function(other) {\n        return this.compare(other) >= 0;\n    };\n\n    /**\n     * Compares this Long with the given one.\n     * @param {Long} other Long to compare against.\n     * @return {number} 0 if they are the same, 1 if the this is greater, and -1\n     *     if the given one is greater.\n     * @expose\n     */\n    Long.prototype.compare = function(other) {\n        if (this.equals(other)) {\n            return 0;\n        }\n        var thisNeg = this.isNegative();\n        var otherNeg = other.isNegative();\n        if (thisNeg && !otherNeg) return -1;\n        if (!thisNeg && otherNeg) return 1;\n        if (!this.unsigned) {\n            // At this point the signs are the same\n            return this.subtract(other).isNegative() ? -1 : 1;\n        } else {\n            // Both are positive if at least one is unsigned\n            return (other.high >>> 0) > (this.high >>> 0) || (other.high == this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\n        }\n    };\n\n    /**\n     * @return {!Long} The negation of this value.\n     * @expose\n     */\n    Long.prototype.negate = function() {\n        if (!this.unsigned && this.equals(Long.MIN_SIGNED_VALUE)) {\n            return Long.MIN_SIGNED_VALUE;\n        }\n        return this.not().add(Long.ONE);\n    };\n\n    /**\n     * Returns the sum of this and the given Long.\n     * @param {Long} other Long to add to this one.\n     * @return {!Long} The sum of this and the given Long.\n     * @expose\n     */\n    Long.prototype.add = function(other) {\n        // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n        \n        var a48 = this.high >>> 16;\n        var a32 = this.high & 0xFFFF;\n        var a16 = this.low >>> 16;\n        var a00 = this.low & 0xFFFF;\n\n        var b48 = other.high >>> 16;\n        var b32 = other.high & 0xFFFF;\n        var b16 = other.low >>> 16;\n        var b00 = other.low & 0xFFFF;\n\n        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n        c00 += a00 + b00;\n        c16 += c00 >>> 16;\n        c00 &= 0xFFFF;\n        c16 += a16 + b16;\n        c32 += c16 >>> 16;\n        c16 &= 0xFFFF;\n        c32 += a32 + b32;\n        c48 += c32 >>> 16;\n        c32 &= 0xFFFF;\n        c48 += a48 + b48;\n        c48 &= 0xFFFF;\n        return Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\n    };\n\n    /**\n     * Returns the difference of this and the given Long.\n     * @param {Long} other Long to subtract from this.\n     * @return {!Long} The difference of this and the given Long.\n     * @expose\n     */\n    Long.prototype.subtract = function(other) {\n        return this.add(other.negate());\n    };\n\n    /**\n     * Returns the product of this and the given long.\n     * @param {Long} other Long to multiply with this.\n     * @return {!Long} The product of this and the other.\n     * @expose\n     */\n    Long.prototype.multiply = function(other) {\n        if (this.isZero()) {\n            return Long.ZERO;\n        } else if (other.isZero()) {\n            return Long.ZERO;\n        }\n\n        if (this.equals(Long.MIN_VALUE)) {\n            return other.isOdd() ? Long.MIN_VALUE : Long.ZERO;\n        } else if (other.equals(Long.MIN_VALUE)) {\n            return this.isOdd() ? Long.MIN_VALUE : Long.ZERO;\n        }\n\n        if (this.isNegative()) {\n            if (other.isNegative()) {\n                return this.negate().multiply(other.negate());\n            } else {\n                return this.negate().multiply(other).negate();\n            }\n        } else if (other.isNegative()) {\n            return this.multiply(other.negate()).negate();\n        }\n        // If both longs are small, use float multiplication\n        if (this.lessThan(TWO_PWR_24) &&\n            other.lessThan(TWO_PWR_24)) {\n            return Long.fromNumber(this.toNumber() * other.toNumber(), this.unsigned);\n        }\n\n        // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n        // We can skip products that would overflow.\n        \n        var a48 = this.high >>> 16;\n        var a32 = this.high & 0xFFFF;\n        var a16 = this.low >>> 16;\n        var a00 = this.low & 0xFFFF;\n\n        var b48 = other.high >>> 16;\n        var b32 = other.high & 0xFFFF;\n        var b16 = other.low >>> 16;\n        var b00 = other.low & 0xFFFF;\n\n        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n        c00 += a00 * b00;\n        c16 += c00 >>> 16;\n        c00 &= 0xFFFF;\n        c16 += a16 * b00;\n        c32 += c16 >>> 16;\n        c16 &= 0xFFFF;\n        c16 += a00 * b16;\n        c32 += c16 >>> 16;\n        c16 &= 0xFFFF;\n        c32 += a32 * b00;\n        c48 += c32 >>> 16;\n        c32 &= 0xFFFF;\n        c32 += a16 * b16;\n        c48 += c32 >>> 16;\n        c32 &= 0xFFFF;\n        c32 += a00 * b32;\n        c48 += c32 >>> 16;\n        c32 &= 0xFFFF;\n        c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n        c48 &= 0xFFFF;\n        return Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\n    };\n\n    /**\n     * Returns this Long divided by the given one.\n     * @param {Long} other Long by which to divide.\n     * @return {!Long} This Long divided by the given one.\n     * @expose\n     */\n    Long.prototype.div = function(other) {\n        if (other.isZero()) {\n            throw(new Error('division by zero'));\n        } else if (this.isZero()) {\n            return Long.ZERO;\n        }\n        if (this.equals(Long.MIN_SIGNED_VALUE)) {\n            if (other.equals(Long.ONE) || other.equals(Long.NEG_ONE)) {\n                return min;  // recall that -MIN_VALUE == MIN_VALUE\n            } else if (other.equals(Long.MIN_VALUE)) {\n                return Long.ONE;\n            } else {\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n                var halfThis = this.shiftRight(1);\n                var approx = halfThis.div(other).shiftLeft(1);\n                if (approx.equals(Long.ZERO)) {\n                    return other.isNegative() ? Long.ONE : Long.NEG_ONE;\n                } else {\n                    var rem = this.subtract(other.multiply(approx));\n                    var result = approx.add(rem.div(other));\n                    return result;\n                }\n            }\n        } else if (other.equals(Long.MIN_VALUE)) {\n            return Long.ZERO;\n        }\n        if (this.isNegative()) {\n            if (other.isNegative()) {\n                return this.negate().div(other.negate());\n            } else {\n                return this.negate().div(other).negate();\n            }\n        } else if (other.isNegative()) {\n            return this.div(other.negate()).negate();\n        }\n\n        // Repeat the following until the remainder is less than other:  find a\n        // floating-point that approximates remainder / other *from below*, add this\n        // into the result, and subtract it from the remainder.  It is critical that\n        // the approximate value is less than or equal to the real value so that the\n        // remainder never becomes negative.\n        var res = Long.ZERO;\n        var rem = this;\n        while (rem.greaterThanOrEqual(other)) {\n            // Approximate the result of division. This may be a little greater or\n            // smaller than the actual value.\n            var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));\n\n            // We will tweak the approximate result by changing it in the 48-th digit or\n            // the smallest non-fractional digit, whichever is larger.\n            var log2 = Math.ceil(Math.log(approx) / Math.LN2);\n            var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);\n\n            // Decrease the approximation until it is smaller than the remainder.  Note\n            // that if it is too large, the product overflows and is negative.\n            var approxRes = Long.fromNumber(approx, this.unsigned);\n            var approxRem = approxRes.multiply(other);\n            while (approxRem.isNegative() || approxRem.greaterThan(rem)) {\n                approx -= delta;\n                approxRes = Long.fromNumber(approx, this.unsigned);\n                approxRem = approxRes.multiply(other);\n            }\n\n            // We know the answer can't be zero... and actually, zero would cause\n            // infinite recursion since we would make no progress.\n            if (approxRes.isZero()) {\n                approxRes = Long.ONE;\n            }\n\n            res = res.add(approxRes);\n            rem = rem.subtract(approxRem);\n        }\n        return res;\n    };\n\n    /**\n     * Returns this Long modulo the given one.\n     * @param {Long} other Long by which to mod.\n     * @return {!Long} This Long modulo the given one.\n     * @expose\n     */\n    Long.prototype.modulo = function(other) {\n        return this.subtract(this.div(other).multiply(other));\n    };\n\n    /**\n     * @return {!Long} The bitwise-NOT of this value.\n     * @expose\n     */\n    Long.prototype.not = function() {\n        return Long.fromBits(~this.low, ~this.high, this.unsigned);\n    };\n\n    /**\n     * Returns the bitwise-AND of this Long and the given one.\n     * @param {Long} other The Long with which to AND.\n     * @return {!Long} The bitwise-AND of this and the other.\n     * @expose\n     */\n    Long.prototype.and = function(other) {\n        return Long.fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n    };\n\n    /**\n     * Returns the bitwise-OR of this Long and the given one.\n     * @param {Long} other The Long with which to OR.\n     * @return {!Long} The bitwise-OR of this and the other.\n     * @expose\n     */\n    Long.prototype.or = function(other) {\n        return Long.fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n    };\n\n    /**\n     * Returns the bitwise-XOR of this Long and the given one.\n     * @param {Long} other The Long with which to XOR.\n     * @return {!Long} The bitwise-XOR of this and the other.\n     * @expose\n     */\n    Long.prototype.xor = function(other) {\n        return Long.fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n    };\n\n    /**\n     * Returns this Long with bits shifted to the left by the given amount.\n     * @param {number} numBits The number of bits by which to shift.\n     * @return {!Long} This shifted to the left by the given amount.\n     * @expose\n     */\n    Long.prototype.shiftLeft = function(numBits) {\n        numBits &= 63;\n        if (numBits == 0) {\n            return this;\n        } else {\n            var low = this.low;\n            if (numBits < 32) {\n                var high = this.high;\n                return Long.fromBits(low << numBits, (high << numBits) | (low >>> (32 - numBits)), this.unsigned);\n            } else {\n                return Long.fromBits(0, low << (numBits - 32), this.unsigned);\n            }\n        }\n    };\n\n    /**\n     * Returns this Long with bits shifted to the right by the given amount.\n     * @param {number} numBits The number of bits by which to shift.\n     * @return {!Long} This shifted to the right by the given amount.\n     * @expose\n     */\n    Long.prototype.shiftRight = function(numBits) {\n        numBits &= 63;\n        if (numBits == 0) {\n            return this;\n        } else {\n            var high = this.high;\n            if (numBits < 32) {\n                var low = this.low;\n                return Long.fromBits((low >>> numBits) | (high << (32 - numBits)), high >> numBits, this.unsigned);\n            } else {\n                return Long.fromBits(high >> (numBits - 32), high >= 0 ? 0 : -1, this.unsigned);\n            }\n        }\n    };\n\n    /**\n     * Returns this Long with bits shifted to the right by the given amount, with\n     * the new top bits matching the current sign bit.\n     * @param {number} numBits The number of bits by which to shift.\n     * @return {!Long} This shifted to the right by the given amount, with\n     *     zeros placed into the new leading bits.\n     * @expose\n     */\n    Long.prototype.shiftRightUnsigned = function(numBits) {\n        numBits &= 63;\n        if (numBits == 0) {\n            return this;\n        } else {\n            var high = this.high;\n            if (numBits < 32) {\n                var low = this.low;\n                return Long.fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\n            } else if (numBits == 32) {\n                return Long.fromBits(high, 0, this.unsigned);\n            } else {\n                return Long.fromBits(high >>> (numBits - 32), 0, this.unsigned);\n            }\n        }\n    };\n\n    /**\n     * @return {!Long} Signed long\n     * @expose\n     */\n    Long.prototype.toSigned = function() {\n        var l = this.clone();\n        l.unsigned = false;\n        return l;\n    };\n\n    /**\n     * @return {!Long} Unsigned long\n     * @expose\n     */\n    Long.prototype.toUnsigned = function() {\n        var l = this.clone();\n        l.unsigned = true;\n        return l;\n    };\n    \n    /**\n     * @return {Long} Cloned instance with the same low/high bits and unsigned flag.\n     * @expose\n     */\n    Long.prototype.clone = function() {\n        return new Long(this.low, this.high, this.unsigned);\n    };\n\n    // Enable module loading if available\n    if (typeof module != 'undefined' && module[\"exports\"]) { // CommonJS\n        module[\"exports\"] = Long;\n    } else if (typeof define != 'undefined' && define[\"amd\"]) { // AMD\n        define(\"Math/Long\", [], function() { return Long; });\n    } else { // Shim\n        if (!global[\"dcodeIO\"]) {\n            global[\"dcodeIO\"] = {};\n        }\n        global[\"dcodeIO\"][\"Long\"] = Long;\n    }\n\n})(this);\n"]},"metadata":{},"sourceType":"script"}