{"ast":null,"code":"'use strict';\n\nconst KafkaClient = require('./kafkaClient');\n\nconst resources = require('./resources');\n\nconst util = require('util');\n\nconst EventEmitter = require('events');\n\nfunction Admin(kafkaClient) {\n  EventEmitter.call(this);\n\n  if (!(kafkaClient instanceof KafkaClient)) {\n    throw new Error(\"'Admin' only accepts 'KafkaClient' for its kafka client.\");\n  }\n\n  var self = this;\n  this.client = kafkaClient;\n  this.RESOURCE_TYPES = resources.RESOURCE_TYPES;\n  this.ready = this.client.ready;\n  this.client.on('ready', function () {\n    self.ready = true;\n    self.emit('ready');\n  });\n  this.client.once('connect', function () {\n    self.emit('connect');\n  });\n  this.client.on('error', function (err) {\n    self.emit('error', err);\n  });\n}\n\nutil.inherits(Admin, EventEmitter);\n\nAdmin.prototype.listGroups = function (cb) {\n  if (!this.ready) {\n    this.once('ready', () => this.listGroups(cb));\n    return;\n  }\n\n  this.client.getListGroups(cb);\n};\n\nAdmin.prototype.listTopics = function (cb) {\n  if (!this.ready) {\n    this.once('ready', () => this.listTopics(cb));\n    return;\n  }\n\n  this.client.loadMetadataForTopics([], cb);\n};\n\nAdmin.prototype.describeGroups = function (consumerGroups, cb) {\n  if (!this.ready) {\n    this.once('ready', () => this.describeGroups(consumerGroups, cb));\n    return;\n  }\n\n  this.client.getDescribeGroups(consumerGroups, cb);\n};\n\nAdmin.prototype.createTopics = function (topics, cb) {\n  if (!this.ready) {\n    this.once('ready', () => this.client.createTopics(topics, cb));\n    return;\n  }\n\n  this.client.createTopics(topics, cb);\n};\n\nAdmin.prototype.describeConfigs = function (payload, cb) {\n  if (!this.ready) {\n    this.once('ready', () => this.describeConfigs(payload, cb));\n    return;\n  }\n\n  this.client.describeConfigs(payload, cb);\n};\n\nmodule.exports = Admin;","map":{"version":3,"sources":["/home/jerem/Bureau/Cours/IWA/stopcovid-front/node_modules/kafka-node/lib/admin.js"],"names":["KafkaClient","require","resources","util","EventEmitter","Admin","kafkaClient","call","Error","self","client","RESOURCE_TYPES","ready","on","emit","once","err","inherits","prototype","listGroups","cb","getListGroups","listTopics","loadMetadataForTopics","describeGroups","consumerGroups","getDescribeGroups","createTopics","topics","describeConfigs","payload","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst KafkaClient = require('./kafkaClient');\nconst resources = require('./resources');\nconst util = require('util');\nconst EventEmitter = require('events');\n\nfunction Admin (kafkaClient) {\n  EventEmitter.call(this);\n  if (!(kafkaClient instanceof KafkaClient)) {\n    throw new Error(\"'Admin' only accepts 'KafkaClient' for its kafka client.\");\n  }\n\n  var self = this;\n  this.client = kafkaClient;\n  this.RESOURCE_TYPES = resources.RESOURCE_TYPES;\n  this.ready = this.client.ready;\n  this.client.on('ready', function () {\n    self.ready = true;\n    self.emit('ready');\n  });\n  this.client.once('connect', function () {\n    self.emit('connect');\n  });\n  this.client.on('error', function (err) {\n    self.emit('error', err);\n  });\n}\nutil.inherits(Admin, EventEmitter);\n\nAdmin.prototype.listGroups = function (cb) {\n  if (!this.ready) {\n    this.once('ready', () => this.listGroups(cb));\n    return;\n  }\n  this.client.getListGroups(cb);\n};\n\nAdmin.prototype.listTopics = function (cb) {\n  if (!this.ready) {\n    this.once('ready', () => this.listTopics(cb));\n    return;\n  }\n  this.client.loadMetadataForTopics([], cb);\n};\n\nAdmin.prototype.describeGroups = function (consumerGroups, cb) {\n  if (!this.ready) {\n    this.once('ready', () => this.describeGroups(consumerGroups, cb));\n    return;\n  }\n  this.client.getDescribeGroups(consumerGroups, cb);\n};\n\nAdmin.prototype.createTopics = function (topics, cb) {\n  if (!this.ready) {\n    this.once('ready', () => this.client.createTopics(topics, cb));\n    return;\n  }\n  this.client.createTopics(topics, cb);\n};\n\nAdmin.prototype.describeConfigs = function (payload, cb) {\n  if (!this.ready) {\n    this.once('ready', () => this.describeConfigs(payload, cb));\n    return;\n  }\n  this.client.describeConfigs(payload, cb);\n};\n\nmodule.exports = Admin;\n"]},"metadata":{},"sourceType":"script"}