{"ast":null,"code":"'use strict';\n\nconst util = require('util');\n\nconst _ = require('lodash');\n\nfunction Partitioner() {}\n\nfunction DefaultPartitioner() {\n  Partitioner.call(this);\n}\n\nutil.inherits(DefaultPartitioner, Partitioner);\n\nDefaultPartitioner.prototype.getPartition = function (partitions) {\n  if (partitions && _.isArray(partitions) && partitions.length > 0) {\n    return partitions[0];\n  } else {\n    return 0;\n  }\n};\n\nfunction CyclicPartitioner() {\n  Partitioner.call(this);\n  this.c = 0;\n}\n\nutil.inherits(CyclicPartitioner, Partitioner);\n\nCyclicPartitioner.prototype.getPartition = function (partitions) {\n  if (_.isEmpty(partitions)) return 0;\n  return partitions[this.c++ % partitions.length];\n};\n\nfunction RandomPartitioner() {\n  Partitioner.call(this);\n}\n\nutil.inherits(RandomPartitioner, Partitioner);\n\nRandomPartitioner.prototype.getPartition = function (partitions) {\n  return partitions[Math.floor(Math.random() * partitions.length)];\n};\n\nfunction KeyedPartitioner() {\n  Partitioner.call(this);\n}\n\nutil.inherits(KeyedPartitioner, Partitioner); // Taken from oid package (Dan Bornstein)\n// Copyright The Obvious Corporation.\n\nKeyedPartitioner.prototype.hashCode = function (stringOrBuffer) {\n  let hash = 0;\n\n  if (stringOrBuffer) {\n    const string = stringOrBuffer.toString();\n    const length = string.length;\n\n    for (let i = 0; i < length; i++) {\n      hash = hash * 31 + string.charCodeAt(i) & 0x7fffffff;\n    }\n  }\n\n  return hash === 0 ? 1 : hash;\n};\n\nKeyedPartitioner.prototype.getPartition = function (partitions, key) {\n  key = key || '';\n  const index = this.hashCode(key) % partitions.length;\n  return partitions[index];\n};\n\nfunction CustomPartitioner(partitioner) {\n  Partitioner.call(this);\n  this.getPartition = partitioner;\n}\n\nutil.inherits(CustomPartitioner, Partitioner);\nmodule.exports.DefaultPartitioner = DefaultPartitioner;\nmodule.exports.CyclicPartitioner = CyclicPartitioner;\nmodule.exports.RandomPartitioner = RandomPartitioner;\nmodule.exports.KeyedPartitioner = KeyedPartitioner;\nmodule.exports.CustomPartitioner = CustomPartitioner;","map":{"version":3,"sources":["/home/jerem/Bureau/Cours/IWA/stopcovid-front/node_modules/kafka-node/lib/partitioner.js"],"names":["util","require","_","Partitioner","DefaultPartitioner","call","inherits","prototype","getPartition","partitions","isArray","length","CyclicPartitioner","c","isEmpty","RandomPartitioner","Math","floor","random","KeyedPartitioner","hashCode","stringOrBuffer","hash","string","toString","i","charCodeAt","key","index","CustomPartitioner","partitioner","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst util = require('util');\nconst _ = require('lodash');\n\nfunction Partitioner () { }\n\nfunction DefaultPartitioner () {\n  Partitioner.call(this);\n}\nutil.inherits(DefaultPartitioner, Partitioner);\n\nDefaultPartitioner.prototype.getPartition = function (partitions) {\n  if (partitions && _.isArray(partitions) && partitions.length > 0) {\n    return partitions[0];\n  } else {\n    return 0;\n  }\n};\n\nfunction CyclicPartitioner () {\n  Partitioner.call(this);\n  this.c = 0;\n}\nutil.inherits(CyclicPartitioner, Partitioner);\n\nCyclicPartitioner.prototype.getPartition = function (partitions) {\n  if (_.isEmpty(partitions)) return 0;\n  return partitions[this.c++ % partitions.length];\n};\n\nfunction RandomPartitioner () {\n  Partitioner.call(this);\n}\nutil.inherits(RandomPartitioner, Partitioner);\n\nRandomPartitioner.prototype.getPartition = function (partitions) {\n  return partitions[Math.floor(Math.random() * partitions.length)];\n};\n\nfunction KeyedPartitioner () {\n  Partitioner.call(this);\n}\nutil.inherits(KeyedPartitioner, Partitioner);\n\n// Taken from oid package (Dan Bornstein)\n// Copyright The Obvious Corporation.\nKeyedPartitioner.prototype.hashCode = function (stringOrBuffer) {\n  let hash = 0;\n  if (stringOrBuffer) {\n    const string = stringOrBuffer.toString();\n    const length = string.length;\n\n    for (let i = 0; i < length; i++) {\n      hash = ((hash * 31) + string.charCodeAt(i)) & 0x7fffffff;\n    }\n  }\n\n  return (hash === 0) ? 1 : hash;\n};\n\nKeyedPartitioner.prototype.getPartition = function (partitions, key) {\n  key = key || '';\n\n  const index = this.hashCode(key) % partitions.length;\n  return partitions[index];\n};\n\nfunction CustomPartitioner (partitioner) {\n  Partitioner.call(this);\n  this.getPartition = partitioner;\n}\nutil.inherits(CustomPartitioner, Partitioner);\n\nmodule.exports.DefaultPartitioner = DefaultPartitioner;\nmodule.exports.CyclicPartitioner = CyclicPartitioner;\nmodule.exports.RandomPartitioner = RandomPartitioner;\nmodule.exports.KeyedPartitioner = KeyedPartitioner;\nmodule.exports.CustomPartitioner = CustomPartitioner;\n"]},"metadata":{},"sourceType":"script"}