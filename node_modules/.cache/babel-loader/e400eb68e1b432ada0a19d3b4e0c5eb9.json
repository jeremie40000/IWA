{"ast":null,"code":"'use strict';\n\nconst logger = require('../logging')('kafka-node:Range');\n\nconst VERSION = 0;\n\nconst _ = require('lodash');\n\nconst groupPartitionsByTopic = require('../utils').groupPartitionsByTopic;\n\nfunction assignRange(topicPartition, groupMembers, callback) {\n  logger.debug('topicPartition: %j', topicPartition);\n\n  var assignment = _(groupMembers).map('id').reduce(function (obj, id) {\n    obj[id] = [];\n    return obj;\n  }, {});\n\n  const topicMemberMap = topicToMemberMap(groupMembers);\n\n  for (var topic in topicMemberMap) {\n    if (!topicMemberMap.hasOwnProperty(topic)) {\n      continue;\n    }\n\n    logger.debug('For topic %s', topic);\n    topicMemberMap[topic].sort();\n    logger.debug('   members: ', topicMemberMap[topic]);\n    var numberOfPartitionsForTopic = topicPartition[topic].length;\n    logger.debug('   numberOfPartitionsForTopic', numberOfPartitionsForTopic);\n    var numberOfMembersForTopic = topicMemberMap[topic].length;\n    logger.debug('   numberOfMembersForTopic', numberOfMembersForTopic);\n    var numberPartitionsPerMember = Math.floor(numberOfPartitionsForTopic / numberOfMembersForTopic);\n    logger.debug('   numberPartitionsPerMember', numberPartitionsPerMember);\n    var membersWithExtraPartition = numberOfPartitionsForTopic % numberOfMembersForTopic;\n    var topicPartitionList = createTopicPartitionArray(topic, numberOfPartitionsForTopic);\n\n    for (var i = 0, n = numberOfMembersForTopic; i < n; i++) {\n      var start = numberPartitionsPerMember * i + Math.min(i, membersWithExtraPartition);\n      var length = numberPartitionsPerMember + (i + 1 > membersWithExtraPartition ? 0 : 1);\n      var assignedTopicPartitions = assignment[topicMemberMap[topic][i]];\n      assignedTopicPartitions.push.apply(assignedTopicPartitions, topicPartitionList.slice(start, start + length));\n    }\n  }\n\n  logger.debug(assignment);\n  callback(null, convertToAssignmentList(assignment, VERSION));\n}\n\nfunction convertToAssignmentList(assignment, version) {\n  return _.map(assignment, function (value, key) {\n    return {\n      memberId: key,\n      topicPartitions: groupPartitionsByTopic(value),\n      version: version\n    };\n  });\n}\n\nfunction createTopicPartitionArray(topic, numberOfPartitions) {\n  return _.times(numberOfPartitions, function (n) {\n    return {\n      topic: topic,\n      partition: n\n    };\n  });\n}\n\nfunction topicToMemberMap(groupMembers) {\n  return groupMembers.reduce(function (result, member) {\n    member.subscription.forEach(function (topic) {\n      if (topic in result) {\n        result[topic].push(member.id);\n      } else {\n        result[topic] = [member.id];\n      }\n    });\n    return result;\n  }, {});\n}\n\nmodule.exports = {\n  assign: assignRange,\n  name: 'range',\n  version: VERSION\n};","map":{"version":3,"sources":["/home/jerem/Bureau/Cours/IWA/stopcovid-front/node_modules/kafka-node/lib/assignment/range.js"],"names":["logger","require","VERSION","_","groupPartitionsByTopic","assignRange","topicPartition","groupMembers","callback","debug","assignment","map","reduce","obj","id","topicMemberMap","topicToMemberMap","topic","hasOwnProperty","sort","numberOfPartitionsForTopic","length","numberOfMembersForTopic","numberPartitionsPerMember","Math","floor","membersWithExtraPartition","topicPartitionList","createTopicPartitionArray","i","n","start","min","assignedTopicPartitions","push","apply","slice","convertToAssignmentList","version","value","key","memberId","topicPartitions","numberOfPartitions","times","partition","result","member","subscription","forEach","module","exports","assign","name"],"mappings":"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","sourcesContent":["'use strict';\n\nconst logger = require('../logging')('kafka-node:Range');\nconst VERSION = 0;\nconst _ = require('lodash');\nconst groupPartitionsByTopic = require('../utils').groupPartitionsByTopic;\n\nfunction assignRange (topicPartition, groupMembers, callback) {\n  logger.debug('topicPartition: %j', topicPartition);\n  var assignment = _(groupMembers).map('id').reduce(function (obj, id) {\n    obj[id] = [];\n    return obj;\n  }, {});\n\n  const topicMemberMap = topicToMemberMap(groupMembers);\n  for (var topic in topicMemberMap) {\n    if (!topicMemberMap.hasOwnProperty(topic)) {\n      continue;\n    }\n    logger.debug('For topic %s', topic);\n    topicMemberMap[topic].sort();\n    logger.debug('   members: ', topicMemberMap[topic]);\n\n    var numberOfPartitionsForTopic = topicPartition[topic].length;\n    logger.debug('   numberOfPartitionsForTopic', numberOfPartitionsForTopic);\n\n    var numberOfMembersForTopic = topicMemberMap[topic].length;\n    logger.debug('   numberOfMembersForTopic', numberOfMembersForTopic);\n\n    var numberPartitionsPerMember = Math.floor(numberOfPartitionsForTopic / numberOfMembersForTopic);\n    logger.debug('   numberPartitionsPerMember', numberPartitionsPerMember);\n\n    var membersWithExtraPartition = numberOfPartitionsForTopic % numberOfMembersForTopic;\n    var topicPartitionList = createTopicPartitionArray(topic, numberOfPartitionsForTopic);\n\n    for (var i = 0, n = numberOfMembersForTopic; i < n; i++) {\n      var start = numberPartitionsPerMember * i + Math.min(i, membersWithExtraPartition);\n      var length = numberPartitionsPerMember + (i + 1 > membersWithExtraPartition ? 0 : 1);\n      var assignedTopicPartitions = assignment[topicMemberMap[topic][i]];\n      assignedTopicPartitions.push.apply(assignedTopicPartitions, topicPartitionList.slice(start, start + length));\n    }\n  }\n\n  logger.debug(assignment);\n\n  callback(null, convertToAssignmentList(assignment, VERSION));\n}\n\nfunction convertToAssignmentList (assignment, version) {\n  return _.map(assignment, function (value, key) {\n    return {\n      memberId: key,\n      topicPartitions: groupPartitionsByTopic(value),\n      version: version\n    };\n  });\n}\n\nfunction createTopicPartitionArray (topic, numberOfPartitions) {\n  return _.times(numberOfPartitions, function (n) {\n    return {\n      topic: topic,\n      partition: n\n    };\n  });\n}\n\nfunction topicToMemberMap (groupMembers) {\n  return groupMembers.reduce(function (result, member) {\n    member.subscription.forEach(function (topic) {\n      if (topic in result) {\n        result[topic].push(member.id);\n      } else {\n        result[topic] = [member.id];\n      }\n    });\n    return result;\n  }, {});\n}\n\nmodule.exports = {\n  assign: assignRange,\n  name: 'range',\n  version: VERSION\n};\n"]},"metadata":{},"sourceType":"script"}