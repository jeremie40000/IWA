{"ast":null,"code":"'use strict';\n\nconst Writable = require('stream').Writable;\n\nconst KafkaClient = require('./kafkaClient');\n\nconst HighLevelProducer = require('./highLevelProducer');\n\nconst logger = require('./logging')('kafka-node:ProducerStream');\n\nconst _ = require('lodash');\n\nconst DEFAULTS = {\n  kafkaClient: {\n    kafkaHost: '127.0.0.1:9092'\n  },\n  producer: {\n    partitionerType: 3\n  }\n};\nconst DEFAULT_HIGH_WATER_MARK = 100;\n\nclass ProducerStream extends Writable {\n  constructor(options) {\n    if (options == null) {\n      options = {};\n    }\n\n    super({\n      objectMode: true,\n      decodeStrings: false,\n      highWaterMark: options.highWaterMark || DEFAULT_HIGH_WATER_MARK\n    });\n\n    _.defaultsDeep(options, DEFAULTS);\n\n    this.client = new KafkaClient(options.kafkaClient);\n    this.producer = new HighLevelProducer(this.client, options.producer, options.producer.customPartitioner);\n    this.producer.on('error', error => this.emit('error', error));\n  }\n\n  sendPayload(payload, callback) {\n    if (!_.isArray(payload)) {\n      payload = [payload];\n    }\n\n    if (!this.producer.ready) {\n      this.producer.once('ready', () => this.producer.send(payload, callback));\n    } else {\n      this.producer.send(payload, callback);\n    }\n  }\n\n  close(callback) {\n    this.producer.close(callback);\n  }\n\n  _write(message, encoding, callback) {\n    logger.debug('_write');\n    this.sendPayload(message, callback);\n  }\n\n  _writev(chunks, callback) {\n    logger.debug('_writev');\n\n    const payload = _.map(chunks, 'chunk');\n\n    this.sendPayload(payload, callback);\n  }\n\n}\n\nmodule.exports = ProducerStream;","map":{"version":3,"sources":["/home/jerem/Bureau/Cours/IWA/stopcovid-front/node_modules/kafka-node/lib/producerStream.js"],"names":["Writable","require","KafkaClient","HighLevelProducer","logger","_","DEFAULTS","kafkaClient","kafkaHost","producer","partitionerType","DEFAULT_HIGH_WATER_MARK","ProducerStream","constructor","options","objectMode","decodeStrings","highWaterMark","defaultsDeep","client","customPartitioner","on","error","emit","sendPayload","payload","callback","isArray","ready","once","send","close","_write","message","encoding","debug","_writev","chunks","map","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,QAAD,CAAP,CAAkBD,QAAnC;;AACA,MAAME,WAAW,GAAGD,OAAO,CAAC,eAAD,CAA3B;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,qBAAD,CAAjC;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,WAAD,CAAP,CAAqB,2BAArB,CAAf;;AACA,MAAMI,CAAC,GAAGJ,OAAO,CAAC,QAAD,CAAjB;;AAEA,MAAMK,QAAQ,GAAG;AACfC,EAAAA,WAAW,EAAE;AACXC,IAAAA,SAAS,EAAE;AADA,GADE;AAIfC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,eAAe,EAAE;AADT;AAJK,CAAjB;AASA,MAAMC,uBAAuB,GAAG,GAAhC;;AAEA,MAAMC,cAAN,SAA6BZ,QAA7B,CAAsC;AACpCa,EAAAA,WAAW,CAAEC,OAAF,EAAW;AACpB,QAAIA,OAAO,IAAI,IAAf,EAAqB;AACnBA,MAAAA,OAAO,GAAG,EAAV;AACD;;AAED,UAAM;AAAEC,MAAAA,UAAU,EAAE,IAAd;AAAoBC,MAAAA,aAAa,EAAE,KAAnC;AAA0CC,MAAAA,aAAa,EAAEH,OAAO,CAACG,aAAR,IAAyBN;AAAlF,KAAN;;AAEAN,IAAAA,CAAC,CAACa,YAAF,CAAeJ,OAAf,EAAwBR,QAAxB;;AAEA,SAAKa,MAAL,GAAc,IAAIjB,WAAJ,CAAgBY,OAAO,CAACP,WAAxB,CAAd;AACA,SAAKE,QAAL,GAAgB,IAAIN,iBAAJ,CAAsB,KAAKgB,MAA3B,EAAmCL,OAAO,CAACL,QAA3C,EAAqDK,OAAO,CAACL,QAAR,CAAiBW,iBAAtE,CAAhB;AACA,SAAKX,QAAL,CAAcY,EAAd,CAAiB,OAAjB,EAA0BC,KAAK,IAAI,KAAKC,IAAL,CAAU,OAAV,EAAmBD,KAAnB,CAAnC;AACD;;AAEDE,EAAAA,WAAW,CAAEC,OAAF,EAAWC,QAAX,EAAqB;AAC9B,QAAI,CAACrB,CAAC,CAACsB,OAAF,CAAUF,OAAV,CAAL,EAAyB;AACvBA,MAAAA,OAAO,GAAG,CAACA,OAAD,CAAV;AACD;;AACD,QAAI,CAAC,KAAKhB,QAAL,CAAcmB,KAAnB,EAA0B;AACxB,WAAKnB,QAAL,CAAcoB,IAAd,CAAmB,OAAnB,EAA4B,MAAM,KAAKpB,QAAL,CAAcqB,IAAd,CAAmBL,OAAnB,EAA4BC,QAA5B,CAAlC;AACD,KAFD,MAEO;AACL,WAAKjB,QAAL,CAAcqB,IAAd,CAAmBL,OAAnB,EAA4BC,QAA5B;AACD;AACF;;AAEDK,EAAAA,KAAK,CAAEL,QAAF,EAAY;AACf,SAAKjB,QAAL,CAAcsB,KAAd,CAAoBL,QAApB;AACD;;AAEDM,EAAAA,MAAM,CAAEC,OAAF,EAAWC,QAAX,EAAqBR,QAArB,EAA+B;AACnCtB,IAAAA,MAAM,CAAC+B,KAAP,CAAa,QAAb;AACA,SAAKX,WAAL,CAAiBS,OAAjB,EAA0BP,QAA1B;AACD;;AAEDU,EAAAA,OAAO,CAAEC,MAAF,EAAUX,QAAV,EAAoB;AACzBtB,IAAAA,MAAM,CAAC+B,KAAP,CAAa,SAAb;;AACA,UAAMV,OAAO,GAAGpB,CAAC,CAACiC,GAAF,CAAMD,MAAN,EAAc,OAAd,CAAhB;;AACA,SAAKb,WAAL,CAAiBC,OAAjB,EAA0BC,QAA1B;AACD;;AAvCmC;;AA0CtCa,MAAM,CAACC,OAAP,GAAiB5B,cAAjB","sourcesContent":["'use strict';\n\nconst Writable = require('stream').Writable;\nconst KafkaClient = require('./kafkaClient');\nconst HighLevelProducer = require('./highLevelProducer');\nconst logger = require('./logging')('kafka-node:ProducerStream');\nconst _ = require('lodash');\n\nconst DEFAULTS = {\n  kafkaClient: {\n    kafkaHost: '127.0.0.1:9092'\n  },\n  producer: {\n    partitionerType: 3\n  }\n};\n\nconst DEFAULT_HIGH_WATER_MARK = 100;\n\nclass ProducerStream extends Writable {\n  constructor (options) {\n    if (options == null) {\n      options = {};\n    }\n\n    super({ objectMode: true, decodeStrings: false, highWaterMark: options.highWaterMark || DEFAULT_HIGH_WATER_MARK });\n\n    _.defaultsDeep(options, DEFAULTS);\n\n    this.client = new KafkaClient(options.kafkaClient);\n    this.producer = new HighLevelProducer(this.client, options.producer, options.producer.customPartitioner);\n    this.producer.on('error', error => this.emit('error', error));\n  }\n\n  sendPayload (payload, callback) {\n    if (!_.isArray(payload)) {\n      payload = [payload];\n    }\n    if (!this.producer.ready) {\n      this.producer.once('ready', () => this.producer.send(payload, callback));\n    } else {\n      this.producer.send(payload, callback);\n    }\n  }\n\n  close (callback) {\n    this.producer.close(callback);\n  }\n\n  _write (message, encoding, callback) {\n    logger.debug('_write');\n    this.sendPayload(message, callback);\n  }\n\n  _writev (chunks, callback) {\n    logger.debug('_writev');\n    const payload = _.map(chunks, 'chunk');\n    this.sendPayload(payload, callback);\n  }\n}\n\nmodule.exports = ProducerStream;\n"]},"metadata":{},"sourceType":"script"}